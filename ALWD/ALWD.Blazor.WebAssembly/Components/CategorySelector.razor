@inject ALWD.Blazor.WebAssembly.Services.CategoryService.ICategoryService _categoryService
@inject ILogger<CategorySelector> _logger

<div class="col-2 border-2">
    <ul class="nav">
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle"
               data-bs-toggle="dropdown"
               href="javascript:void(0)"
               role="button"
               aria-expanded="false">
                @(CurrentCategory?.Name ?? "Все")
            </a>
            <ul class="dropdown-menu">
                <li>
                    <a class="dropdown-item" @onclick="() => OnCategoryChanged(null)">
                        Все
                    </a>
                </li>
                @if (Categories?.Any() == true)
                {
                    @foreach (var category in Categories)
                    {
                        <li>
                            <a class="dropdown-item" @onclick="() => OnCategoryChanged(category)">
                                @category.Name
                            </a>
                        </li>
                    }
                }
                else
                {
                    <li>
                        <span class="dropdown-item">Загрузка категорий...</span>
                    </li>
                }
            </ul>
        </li>
    </ul>
</div>

@code {
    private IReadOnlyList<Category>? Categories { get; set; }
    
    [Parameter]
    public Category? CurrentCategory { get; set; }

    [Parameter]
    public EventCallback<Category?> CurrentCategoryChanged { get; set; }

    [Parameter] 
    public EventCallback OnCategoryChangedCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _logger.LogInformation("CategorySelector: OnInitializedAsync started");
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try 
        {
            var categoriesResponse = await _categoryService.GetCategoryListAsync();
            _logger.LogInformation($"CategorySelector: Got response, success: {categoriesResponse.Successfull}");
            
            if (categoriesResponse.Successfull)
            {
                Categories = categoriesResponse.Data;
                _logger.LogInformation($"CategorySelector: Categories count: {Categories.Count}");
                StateHasChanged();
            }
            else
            {
                _logger.LogError($"CategorySelector: Error getting categories: {categoriesResponse.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError($"CategorySelector: Exception in LoadCategories: {ex.Message}");
        }
    }

    private async Task OnCategoryChanged(Category? newCurrentCategory)
    {
        await CurrentCategoryChanged.InvokeAsync(newCurrentCategory);
        await OnCategoryChangedCallback.InvokeAsync();
    }
}
